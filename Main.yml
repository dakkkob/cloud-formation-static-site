Description: |
  Tempalte to host static site
    - connects to an existing GitHub repository
    - pipeline deploys the repository content into a S3 bucket 
    - cloudfront then creates a distribution from the S3 content
    Prerequisites:
      - Cerfiricate in certificate manager (eu-east-1 region) if required
      - GitHub connection in CodeCommit > Settings > Connections

Parameters:
  ProjectName:
    Type: String
  PageIndex:
    Type: String
    ConstraintDescription: "[A-Za-z0-9]+.[A-Za-z]{2-4}"
    Description: "For example index.html or index.php"
    Default: "index.html"
  DomainName1:
    Type: String
    ConstraintDescription: "[A-Za-z0-9]+.[A-Za-z]{2-3}"
    Description: "Domain name/CNAME which will point to cloudfront distribution. www will be added automatically. Providing certificate ID is then mandatory!"    
  DomainName2:
    Type: String
    ConstraintDescription: "[A-Za-z0-9]+.[A-Za-z]{2-3}"
    Description: "Domain name/CNAME which will point to cloudfront distribution. www will be added automatically. Providing certificate ID is then mandatory!"    
  DomainName3:
    Type: String
    ConstraintDescription: "[A-Za-z0-9]+.[A-Za-z]{2-3}"
    Description: "Domain name/CNAME which will point to cloudfront distribution. www will be added automatically. Providing certificate ID is then mandatory!"    
  CertificateID:
    Type: String
    Description: "ID of certificate from AWS certificate manager which has been issued to your domain. Must be in us-east1 region!"
  RepositoryName:
    Type: String
    Description: "Full Repository Name (GitHub Account/repository name)"
  RepositoryBranchName:
    Type: String
    Default: "master"  
  GitHubConnection:
    Type: String
    Description: "ARN of the Github Connection - you can define/get it in CodeCommit > Settings > Connections"


Conditions:
  Domain1Exists:
    Fn::Not:
      - Fn::Equals:
          - ''
          - Ref: DomainName1
  Domain2Exists:
    Fn::Not:
      - Fn::Equals:
          - ''
          - Ref: DomainName2
  Domain3Exists:
    Fn::Not:
      - Fn::Equals:
          - ''
          - Ref: DomainName3         
  CertificateExists:
    Fn::Not:
      - Fn::Equals:
          - ''
          - Ref: CertificateID
          
Resources: 
  S3BucketHosting:
    Type: "AWS::S3::Bucket"    

  S3BucketCodeCommit:
    Type: "AWS::S3::Bucket"

  S3BucketHostingPolicyForCloudFront:
      Type: "AWS::S3::BucketPolicy"
      Properties:
          Bucket: !Ref S3BucketHosting
          PolicyDocument: 
              Version: "2012-10-17"              
              Statement: 
                - 
                  Effect: "Allow"
                  Action: "s3:GetObject"
                  Resource: !Sub "arn:aws:s3:::${S3BucketHosting}/*"
                  Principal: 
                    Service: cloudfront.amazonaws.com
                  Condition:
                    StringEquals:
                      AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}
                      
  CleanupBucketHostingOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !ImportValue ArnOfLambdaFunctionPurgeS3
      BucketName: !Ref S3BucketHosting

  CleanupBucketCodeCommitOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !ImportValue ArnOfLambdaFunctionPurgeS3
      BucketName: !Ref S3BucketCodeCommit

  IAMRoleForPipeLine:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/service-role/"
        RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-${ProjectName}"
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        MaxSessionDuration: 3600
        ManagedPolicyArns: 
          - !Ref IAMManagedPolicyForPipeline      

  IAMManagedPolicyForPipeline:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-${ProjectName}"
          Path: "/service-role/"
          PolicyDocument: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "iam:PassRole"
                          ],
                          "Resource": "*",
                          "Effect": "Allow",
                          "Condition": {
                              "StringEqualsIfExists": {
                                  "iam:PassedToService": [
                                      "cloudformation.amazonaws.com",
                                      "elasticbeanstalk.amazonaws.com",
                                      "ec2.amazonaws.com",
                                      "ecs-tasks.amazonaws.com"
                                  ]
                              }
                          }
                      },
                      {
                          "Action": [
                              "codecommit:CancelUploadArchive",
                              "codecommit:GetBranch",
                              "codecommit:GetCommit",
                              "codecommit:GetRepository",
                              "codecommit:GetUploadArchiveStatus",
                              "codecommit:UploadArchive"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "codedeploy:CreateDeployment",
                              "codedeploy:GetApplication",
                              "codedeploy:GetApplicationRevision",
                              "codedeploy:GetDeployment",
                              "codedeploy:GetDeploymentConfig",
                              "codedeploy:RegisterApplicationRevision"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "codestar-connections:UseConnection"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "elasticbeanstalk:*",
                              "ec2:*",
                              "elasticloadbalancing:*",
                              "autoscaling:*",
                              "cloudwatch:*",
                              "s3:*",
                              "sns:*",
                              "cloudformation:*",
                              "rds:*",
                              "sqs:*",
                              "ecs:*"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "lambda:InvokeFunction",
                              "lambda:ListFunctions"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "opsworks:CreateDeployment",
                              "opsworks:DescribeApps",
                              "opsworks:DescribeCommands",
                              "opsworks:DescribeDeployments",
                              "opsworks:DescribeInstances",
                              "opsworks:DescribeStacks",
                              "opsworks:UpdateApp",
                              "opsworks:UpdateStack"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "cloudformation:CreateStack",
                              "cloudformation:DeleteStack",
                              "cloudformation:DescribeStacks",
                              "cloudformation:UpdateStack",
                              "cloudformation:CreateChangeSet",
                              "cloudformation:DeleteChangeSet",
                              "cloudformation:DescribeChangeSet",
                              "cloudformation:ExecuteChangeSet",
                              "cloudformation:SetStackPolicy",
                              "cloudformation:ValidateTemplate"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "codebuild:BatchGetBuilds",
                              "codebuild:StartBuild",
                              "codebuild:BatchGetBuildBatches",
                              "codebuild:StartBuildBatch"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "devicefarm:ListProjects",
                              "devicefarm:ListDevicePools",
                              "devicefarm:GetRun",
                              "devicefarm:GetUpload",
                              "devicefarm:CreateUpload",
                              "devicefarm:ScheduleRun"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "servicecatalog:ListProvisioningArtifacts",
                              "servicecatalog:CreateProvisioningArtifact",
                              "servicecatalog:DescribeProvisioningArtifact",
                              "servicecatalog:DeleteProvisioningArtifact",
                              "servicecatalog:UpdateProduct"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "cloudformation:ValidateTemplate"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "ecr:DescribeImages"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "states:DescribeExecution",
                              "states:DescribeStateMachine",
                              "states:StartExecution"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "appconfig:StartDeployment",
                              "appconfig:StopDeployment",
                              "appconfig:GetDeployment"
                          ],
                          "Resource": "*"
                      }
                  ],
                  "Version": "2012-10-17"
              }

  CloudFrontDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
          DistributionConfig:               
              Aliases:
                - Fn::If:
                  - Domain1Exists
                  - !Ref DomainName1
                  - !Ref "AWS::NoValue"
                - Fn::If:
                  - Domain1Exists
                  - !Sub "www.${DomainName1}"
                  - !Ref "AWS::NoValue"
                - Fn::If:
                  - Domain2Exists
                  - !Ref DomainName2
                  - !Ref "AWS::NoValue"
                - Fn::If:
                  - Domain2Exists
                  - !Sub "www.${DomainName2}"
                  - !Ref "AWS::NoValue"
                - Fn::If:
                  - Domain3Exists
                  - !Ref DomainName3
                  - !Ref "AWS::NoValue"
                - Fn::If:
                  - Domain3Exists
                  - !Sub "www.${DomainName3}"
                  - !Ref "AWS::NoValue"                                    
              Origins: 
                - 
                  Id: !Sub "${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"
                  DomainName: !Sub "${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"
                  S3OriginConfig:
                    OriginAccessIdentity: ''
                  OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
                  ConnectionAttempts: 3
                  ConnectionTimeout: 10
              OriginGroups: 
                  Quantity: 0
              DefaultCacheBehavior: 
                  AllowedMethods: 
                    - "HEAD"
                    - "GET"
                  CachedMethods: 
                    - "HEAD"
                    - "GET"
                  Compress: true
                  CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                  SmoothStreaming: false
                  TargetOriginId: !Sub "${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"
                  ViewerProtocolPolicy: "redirect-to-https"
              Comment: ""
              PriceClass: "PriceClass_All"
              Enabled: true
              ViewerCertificate:
                  Fn::If:
                    - CertificateExists
                    - 
                      AcmCertificateArn: !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificateID}"
                      MinimumProtocolVersion: "TLSv1.2_2021"
                      SslSupportMethod: "sni-only"
                    - CloudFrontDefaultCertificate: true
              Restrictions: 
                  GeoRestriction: 
                      RestrictionType: "none"
              HttpVersion: "http2"
              DefaultRootObject: "index.html"
              IPV6Enabled: true
  
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CodePipeline:
      Type: "AWS::CodePipeline::Pipeline"
      Properties:
          Name: !Sub "Pipeline${ProjectName}"
          RoleArn: !GetAtt IAMRoleForPipeLine.Arn
          RestartExecutionOnUpdate: No
          ArtifactStore: 
              Location: !Ref S3BucketCodeCommit
              Type: "S3"
          Stages: 
            - 
              Name: "Source"
              Actions: 
                - 
                  Name: "Source"
                  ActionTypeId: 
                      Category: "Source"
                      Owner: "AWS"
                      Provider: "CodeStarSourceConnection"
                      Version: "1"
                  Configuration: 
                      BranchName: !Ref RepositoryBranchName
                      OutputArtifactFormat: "CODE_ZIP"
                      FullRepositoryId: !Ref RepositoryName
                      ConnectionArn: !Ref GitHubConnection
                      DetectChanges: "Yes"
                  OutputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region
                  Namespace: "SourceVariables"
                  RunOrder: 1
            - 
              Name: "CleanupS3HostingByLambda"
              Actions: 
                - 
                  Name: "CleanupS3HostingByLambda"
                  ActionTypeId: 
                      Category: "Invoke"
                      Owner: "AWS"
                      Provider: "Lambda"
                      Version: "1"
                  Configuration: 
                      FunctionName: !ImportValue NameOfLambdaFunctionPurgeS3ForBuild
                      UserParameters:  !Sub "{\"S3Bucket\": \"${S3BucketHosting}\"}"
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region                  
                  RunOrder: 1
            - 
              Name: "Deploy"
              Actions: 
                - 
                  Name: "Deploy"
                  ActionTypeId: 
                      Category: "Deploy"
                      Owner: "AWS"
                      Provider: "S3"
                      Version: "1"
                  Configuration: 
                      BucketName: !Ref S3BucketHosting                      
                      Extract: "true"
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region
                  Namespace: "DeployVariables"
                  RunOrder: 1
            - 
              Name: "InvalidateCloudFrontByLambda"
              Actions: 
                - 
                  Name: "InvalidateCloudFrontByLambda"
                  ActionTypeId: 
                      Category: "Invoke"
                      Owner: "AWS"
                      Provider: "Lambda"
                      Version: "1"
                  Configuration: 
                      FunctionName: !ImportValue NameOfLambdaFunctionInvalidateCF
                      UserParameters: !Sub "{\"distributionId\": \"${CloudFrontDistribution.Id}\", \"objectPaths\": [\"/*\"]}"
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region
                  RunOrder: 1
            - 
              Name: "CleanupS3CodeCommitByLambda"
              Actions: 
                - 
                  Name: "CleanupS3CodeCommitByLambda"
                  ActionTypeId: 
                      Category: "Invoke"
                      Owner: "AWS"
                      Provider: "Lambda"
                      Version: "1"
                  Configuration: 
                      FunctionName: !ImportValue NameOfLambdaFunctionPurgeS3ForBuild
                      UserParameters:  !Sub "{\"S3Bucket\": \"${S3BucketCodeCommit}\"}"
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region                  
                  RunOrder: 1              

Outputs:
  WebPageURL:
    Description: "URL of the page"
    Value: !GetAtt CloudFrontDistribution.DomainName
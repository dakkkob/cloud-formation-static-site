Description: |
  Tempalte to deploy shared features for static sites stacks (StaticSite.yml)
    - Lambda for CloudFront distribution invalidation
    - Lambda for S3 bucket cleanup

Parameters:
    ProjectName:
        Type: String


Resources:
  LambdaFunctionInvalidateCF:
      Type: "AWS::Lambda::Function"
      Properties:
          FunctionName: "InvalidateCloudFrontDistribution"
          Handler: "index.lambda_handler"
          Architectures: 
            - "x86_64"
          Code: 
              ZipFile: |
                  import json
                  import boto3

                  code_pipeline = boto3.client("codepipeline")
                  cloud_front = boto3.client("cloudfront")

                  def lambda_handler(event, context):
                    job_id = event["CodePipeline.job"]["id"]
                    try:
                      user_params = json.loads(
                        event["CodePipeline.job"]
                          ["data"]
                          ["actionConfiguration"]
                          ["configuration"]
                          ["UserParameters"]
                      )
                                    
                      distribution_id = user_params["distributionId"]
                      object_paths = user_params["objectPaths"]
                      
                      invalidation_batch = {
                        "Paths": {
                          "Quantity": len(object_paths),
                          "Items": object_paths,
                        },
                        "CallerReference": event["CodePipeline.job"]["id"],
                      }
                      
                      cloud_front.create_invalidation(
                        DistributionId=distribution_id,
                        InvalidationBatch=invalidation_batch,
                      )
                    except Exception as e:
                      code_pipeline.put_job_failure_result(
                        jobId=job_id,
                        failureDetails={
                          "type": "JobFailed",
                          "message": str(e),
                        },
                      )
                    else:
                      code_pipeline.put_job_success_result(
                        jobId=job_id,
                      )
          MemorySize: 128
          Role: !GetAtt IAMRoleForLambdaCF.Arn
          Runtime: "python3.10"
          Timeout: 3
          TracingConfig: 
              Mode: "PassThrough"
          EphemeralStorage: 
              Size: 512

  IAMRoleForLambdaCF:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns: 
              - !Ref IAMManagedPolicyForLambdaCFRole

  IAMManagedPolicyForLambdaCFRole:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          Path: "/service-role/"
          PolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": "logs:CreateLogGroup",
                          "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:CreateLogStream",
                              "logs:PutLogEvents"
                          ],
                          "Resource": [
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/InvalidateCloudFrontDistribution:*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "codepipeline:PutJobFailureResult",
                              "codepipeline:PutJobSuccessResult",
                              "cloudfront:CreateInvalidation"
                          ],
                          "Resource": "*"
                      }
                  ]
              }          

  LogsLogGroupInvalidateCloudFrontDistribution:
    Type: "AWS::Logs::LogGroup"
    Properties:
        LogGroupName: "/aws/lambda/InvalidateCloudFrontDistribution"      
        RetentionInDays: 7            

  LambdaFunctionPurgeS3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "PurgeS3"
      Code: 
        ZipFile: |
            import json
            import boto3
            import logging
            import cfnresponse

            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            def lambda_handler(event, context):
              logger.info(f"event: {event}")
              try:
                bucket = event['ResourceProperties']['BucketName']
                logger.info(f"bucket: {bucket}, event['RequestType']: {event['RequestType']}")
                if event['RequestType'] == 'Delete':
                  s3 = boto3.resource('s3')
                  bucket = s3.Bucket(bucket)
                  for obj in bucket.objects.filter():
                    logger.info(f"delete obj: {obj}")
                    s3.Object(bucket.name, obj.key).delete()

                sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                logger.info(f"Exception: {e}")
                sendResponseCfn(event, context, cfnresponse.FAILED)

            def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
      Handler: "index.lambda_handler"
      Runtime: python3.10
      MemorySize: 128
      Timeout: 60
      Role: !GetAtt IAMRoleForLambdaPurgeS3.Arn    

  LambdaFunctionPurgeS3ForBuild:
      Type: "AWS::Lambda::Function"
      Properties:
          FunctionName: "PurgeS3ForBuild"
          Handler: "index.lambda_handler"
          Architectures: 
            - "x86_64"
          Code: 
              ZipFile: |
                  import json
                  import boto3
                  import logging

                  logger = logging.getLogger()
                  logger.setLevel(logging.INFO)

                  code_pipeline = boto3.client("codepipeline")

                  def lambda_handler(event, context):
                    logger.info(f"event: {event}")
                    job_id = event["CodePipeline.job"]["id"]
                    
                    try:
                      user_params = json.loads(
                        event["CodePipeline.job"]
                          ["data"]
                          ["actionConfiguration"]
                          ["configuration"]
                          ["UserParameters"]
                      )
                      bucket_name = user_params["S3Bucket"]
                      logger.info(f"bucket: {bucket_name}")
                      
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket_name)
                      
                      objects_to_delete = [{'Key': obj.key} for obj in bucket.objects.all()]
                      if objects_to_delete:
                        logger.info("Deleting objects:")
                        for obj in objects_to_delete:
                          logger.info(f"delete obj: {obj['Key']}")
                        bucket.delete_objects(Delete={'Objects': objects_to_delete})
                    except Exception as e:
                      code_pipeline.put_job_failure_result(
                        jobId=job_id,
                        failureDetails={
                          "type": "JobFailed",
                          "message": str(e),
                        },
                      )
                    else:
                      code_pipeline.put_job_success_result(
                        jobId=job_id,
                      )
          MemorySize: 128
          Role: !GetAtt IAMRoleForLambdaPurgeS3.Arn
          Runtime: python3.10
          Timeout: 60    

  IAMRoleForLambdaPurgeS3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      ManagedPolicyArns: 
              - !Ref IAMManagedPolicyForLambdaPurgeS3

  IAMManagedPolicyForLambdaPurgeS3:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          Path: "/service-role/"
          PolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": "logs:CreateLogGroup",
                          "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:CreateLogStream",
                              "logs:PutLogEvents"
                          ],
                          "Resource": [
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PurgeS3:*",
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/PurgeS3ForBuild:*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Resource": [
                              "arn:aws:s3:::*"                              
                          ],
                          "Action": [
                              "s3:*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "codepipeline:PutJobFailureResult",
                              "codepipeline:PutJobSuccessResult"
                          ],
                          "Resource": "*"
                      }
                  ]
              }          

  LogsLogGroupPurgeS3:
    Type: "AWS::Logs::LogGroup"
    Properties:
        LogGroupName: "/aws/lambda/PurgeS3"        
        RetentionInDays: 7

  LogsLogGroupPurgeS3ForBuild:
    Type: "AWS::Logs::LogGroup"
    Properties:
        LogGroupName: "/aws/lambda/PurgeS3ForBuild"   
        RetentionInDays: 7

### Section for monitoring

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "UptimeLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*ScheduledRule*"      

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: allow-logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:*'
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/UptimeLambdaFunction:*"
      - PolicyName: put-cw-data
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'cloudwatch:PutMetricData'
            Resource: '*'

  UptimeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: "UptimeLambdaFunction"
      Handler: "index.handler"
      Runtime: nodejs20.x
      Timeout: 300
      Role:
        Fn::GetAtt:
          - "LambdaExecutionRole"
          - "Arn"
      Code:
        ZipFile: |
            'use strict';

            exports.handler = function(event, context, callback) {
              console.log(event);

              const target = event.WebsiteUrl;
              const urlObject = new URL(target);

              const protocol = urlObject.protocol === 'https:' ? 'https' : 'http';
              const mod = require(protocol);

              console.log('[INFO] - Checking ' + target);
              const options = {
                hostname: urlObject.hostname,
                port: urlObject.port,
                path: urlObject.pathname + urlObject.search,
                method: 'GET'
              };

              const req = mod.request(options, function(res) {
                res.setEncoding('utf8');
                res.on('data', function(chunk) {
                  console.log('[INFO] - Read body chunk');
                });
                res.on('end', function() {
                  console.log('[INFO] - Response end');
                  callback();
                });
              });

              req.on('error', function(e) {
                console.log('[ERROR] - ' + e.message);
                callback(e);
              });

              req.end();
            };

  LogsLogGroupUptimeLambdaFunction:
    Type: "AWS::Logs::LogGroup"
    Properties:
        LogGroupName: "/aws/lambda/UptimeLambdaFunction"                
        RetentionInDays: 7

Outputs:
  ArnOfLambdaFunctionInvalidateCF:
    Value: !GetAtt LambdaFunctionInvalidateCF.Arn
    Export:
      Name: ArnOfLambdaFunctionInvalidateCF

  NameOfLambdaFunctionInvalidateCF:
    Value: !Ref LambdaFunctionInvalidateCF
    Export:
      Name: NameOfLambdaFunctionInvalidateCF

  ArnOfLambdaFunctionPurgeS3:
    Value: !GetAtt LambdaFunctionPurgeS3.Arn
    Export:
      Name: ArnOfLambdaFunctionPurgeS3

  NameOfLambdaFunctionPurgeS3:
    Value: !Ref LambdaFunctionPurgeS3
    Export:
      Name: NameOfLambdaFunctionPurgeS3

  ArnOfLambdaFunctionPurgeS3ForBuild:
    Value: !GetAtt LambdaFunctionPurgeS3ForBuild.Arn
    Export:
      Name: ArnOfLambdaFunctionPurgeS3ForBuild

  NameOfLambdaFunctionPurgeS3ForBuild:
    Value: !Ref LambdaFunctionPurgeS3ForBuild
    Export:
      Name: NameOfLambdaFunctionPurgeS3ForBuild

  ArnOfUptimeLambdaFunction:
    Value: !GetAtt UptimeLambdaFunction.Arn
    Export:
      Name: ArnOfUptimeLambdaFunction

  NameOfUptimeLambdaFunction:
    Value: !Ref UptimeLambdaFunction
    Export:
      Name: NameOfUptimeLambdaFunction

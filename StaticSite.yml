Description: |
  Tempalte to host static site
    - code commit repo
    - pipeline to publish it into S3 
    - creates a cloudfront distribution

Parameters:
  ProjectName:
    Type: String
  PageIndex:
    Type: String
    ConstraintDescription: "[A-Za-z0-9]+.[A-Za-z]{2-4}"
    Description: "For example index.html or index.php"

Resources: 
  S3BucketHosting:
    Type: "AWS::S3::Bucket"

  S3BucketCodeCommit:
    Type: "AWS::S3::Bucket"
    
  CodeCommitRepository:
    Type: "AWS::CodeCommit::Repository"
    Properties:
      RepositoryName: !Ref ProjectName

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties: 
      Name: !Ref ProjectName
      Source:
        BuildSpec: !Sub |
                    version: 0.2
                    
                    phases:
                      build:
                        commands:
                            - aws s3 rm --recursive "s3://${S3BucketHosting}/"
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: !Ref CodeCommitRepository
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment: 
          ComputeType: "BUILD_GENERAL1_SMALL"
          Image: "aws/codebuild/amazonlinux2-aarch64-standard:1.0"
          ImagePullCredentialsType: "CODEBUILD"
          PrivilegedMode: false
          Type: "ARM_CONTAINER"
      ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/${IAMRoleForCodeBuild}"
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      BadgeEnabled: false
      LogsConfig: 
          CloudWatchLogs: 
              Status: "ENABLED"
          S3Logs: 
              Status: "DISABLED"
              EncryptionDisabled: false
      Visibility: "PRIVATE"

  IAMRoleForCodeBuild:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/service-role/"
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        MaxSessionDuration: 3600
        ManagedPolicyArns: 
          - !Ref IAMManagedPolicyCodeBuild

  IAMRoleForPipeLine:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/service-role/"
        RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-${ProjectName}"
        AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
        MaxSessionDuration: 3600
        ManagedPolicyArns: 
          - !Ref IAMManagedPolicyForPipeline      

  IAMRoleForBucketRepositoryToStartPipeline:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/service-role/"
          RoleName: !Sub "cwe-role-${AWS::Region}-${S3BucketCodeCommit}"
          AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"events.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600
          ManagedPolicyArns: 
            - !Ref IAMManagedPolicyForRepositoryBucketToStartPipeline

  IAMManagedPolicyCodeBuild:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
        Path: "/service-role/"
        PolicyDocument: !Sub |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${S3BucketHosting}",
                            "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${S3BucketHosting}:*"
                        ],
                        "Action": [
                            "logs:CreateLogGroup",
                            "logs:CreateLogStream",
                            "logs:PutLogEvents"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                        ],
                        "Action": [
                            "s3:PutObject",
                            "s3:GetObject",
                            "s3:GetObjectVersion",
                            "s3:GetBucketAcl",
                            "s3:GetBucketLocation"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:s3:::${S3BucketCodeCommit}",
                            "arn:aws:s3:::${S3BucketCodeCommit}/*"
                        ],
                        "Action": [
                            "s3:PutObject",
                            "s3:GetBucketAcl",
                            "s3:GetBucketLocation"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "codebuild:CreateReportGroup",
                            "codebuild:CreateReport",
                            "codebuild:UpdateReport",
                            "codebuild:BatchPutTestCases",
                            "codebuild:BatchPutCodeCoverages"
                        ],
                        "Resource": [
                            "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${S3BucketHosting}-*"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Resource": [
                            "arn:aws:s3:::${S3BucketHosting}/*",
                            "arn:aws:s3:::${S3BucketHosting}"
                        ],
                        "Action": [
                            "s3:*"
                        ]
                    }
                ]
            }

  IAMManagedPolicyForPipeline:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-${ProjectName}"
          Path: "/service-role/"
          PolicyDocument: |
              {
                  "Statement": [
                      {
                          "Action": [
                              "iam:PassRole"
                          ],
                          "Resource": "*",
                          "Effect": "Allow",
                          "Condition": {
                              "StringEqualsIfExists": {
                                  "iam:PassedToService": [
                                      "cloudformation.amazonaws.com",
                                      "elasticbeanstalk.amazonaws.com",
                                      "ec2.amazonaws.com",
                                      "ecs-tasks.amazonaws.com"
                                  ]
                              }
                          }
                      },
                      {
                          "Action": [
                              "codecommit:CancelUploadArchive",
                              "codecommit:GetBranch",
                              "codecommit:GetCommit",
                              "codecommit:GetRepository",
                              "codecommit:GetUploadArchiveStatus",
                              "codecommit:UploadArchive"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "codedeploy:CreateDeployment",
                              "codedeploy:GetApplication",
                              "codedeploy:GetApplicationRevision",
                              "codedeploy:GetDeployment",
                              "codedeploy:GetDeploymentConfig",
                              "codedeploy:RegisterApplicationRevision"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "codestar-connections:UseConnection"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "elasticbeanstalk:*",
                              "ec2:*",
                              "elasticloadbalancing:*",
                              "autoscaling:*",
                              "cloudwatch:*",
                              "s3:*",
                              "sns:*",
                              "cloudformation:*",
                              "rds:*",
                              "sqs:*",
                              "ecs:*"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "lambda:InvokeFunction",
                              "lambda:ListFunctions"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "opsworks:CreateDeployment",
                              "opsworks:DescribeApps",
                              "opsworks:DescribeCommands",
                              "opsworks:DescribeDeployments",
                              "opsworks:DescribeInstances",
                              "opsworks:DescribeStacks",
                              "opsworks:UpdateApp",
                              "opsworks:UpdateStack"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "cloudformation:CreateStack",
                              "cloudformation:DeleteStack",
                              "cloudformation:DescribeStacks",
                              "cloudformation:UpdateStack",
                              "cloudformation:CreateChangeSet",
                              "cloudformation:DeleteChangeSet",
                              "cloudformation:DescribeChangeSet",
                              "cloudformation:ExecuteChangeSet",
                              "cloudformation:SetStackPolicy",
                              "cloudformation:ValidateTemplate"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Action": [
                              "codebuild:BatchGetBuilds",
                              "codebuild:StartBuild",
                              "codebuild:BatchGetBuildBatches",
                              "codebuild:StartBuildBatch"
                          ],
                          "Resource": "*",
                          "Effect": "Allow"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "devicefarm:ListProjects",
                              "devicefarm:ListDevicePools",
                              "devicefarm:GetRun",
                              "devicefarm:GetUpload",
                              "devicefarm:CreateUpload",
                              "devicefarm:ScheduleRun"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "servicecatalog:ListProvisioningArtifacts",
                              "servicecatalog:CreateProvisioningArtifact",
                              "servicecatalog:DescribeProvisioningArtifact",
                              "servicecatalog:DeleteProvisioningArtifact",
                              "servicecatalog:UpdateProduct"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "cloudformation:ValidateTemplate"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "ecr:DescribeImages"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "states:DescribeExecution",
                              "states:DescribeStateMachine",
                              "states:StartExecution"
                          ],
                          "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "appconfig:StartDeployment",
                              "appconfig:StopDeployment",
                              "appconfig:GetDeployment"
                          ],
                          "Resource": "*"
                      }
                  ],
                  "Version": "2012-10-17"
              }

  IAMManagedPolicyForRepositoryBucketToStartPipeline:
      Type: "AWS::IAM::ManagedPolicy"
      Properties:
          ManagedPolicyName: !Sub "start-pipeline-execution-${AWS::Region}-${ProjectName}"
          Path: "/service-role/"
          PolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": [
                              "codepipeline:StartPipelineExecution"
                          ],
                          "Resource": [
                              "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:Pipeline${ProjectName}"
                          ]
                      }
                  ]
              }

  CloudFrontDistribution:
      Type: "AWS::CloudFront::Distribution"
      Properties:
          DistributionConfig: 
              Origins: 
                - 
                  ConnectionAttempts: 3
                  ConnectionTimeout: 10
                  DomainName: !Sub "${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"
                  Id: !Sub "${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"
                  OriginPath: ""
                  S3OriginConfig: 
                      OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontCloudFrontOriginAccessIdentity}"
              OriginGroups: 
                  Quantity: 0
              DefaultCacheBehavior: 
                  AllowedMethods: 
                    - "HEAD"
                    - "GET"
                  CachedMethods: 
                    - "HEAD"
                    - "GET"
                  Compress: true
                  CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
                  SmoothStreaming: false
                  TargetOriginId: !Sub "${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"
                  ViewerProtocolPolicy: "redirect-to-https"
              Comment: ""
              PriceClass: "PriceClass_All"
              Enabled: true
              ViewerCertificate:                   
                  CloudFrontDefaultCertificate: true
              Restrictions: 
                  GeoRestriction: 
                      RestrictionType: "none"
              HttpVersion: "http2"
              DefaultRootObject: "index.html"
              IPV6Enabled: true

  CloudFrontCloudFrontOriginAccessIdentity:
      Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
      Properties:
          CloudFrontOriginAccessIdentityConfig: 
              Comment: !Sub "access-identity-${S3BucketHosting}.s3.${AWS::Region}.amazonaws.com"

  CodePipeline:
      Type: "AWS::CodePipeline::Pipeline"
      Properties:
          Name: !Sub "Pipeline${ProjectName}"
          RoleArn: !GetAtt IAMRoleForPipeLine.Arn
          ArtifactStore: 
              Location: !Ref S3BucketCodeCommit
              Type: "S3"
          Stages: 
            - 
              Name: "Source"
              Actions: 
                - 
                  Name: "Source"
                  ActionTypeId: 
                      Category: "Source"
                      Owner: "AWS"
                      Provider: "CodeCommit"
                      Version: "1"
                  Configuration: 
                      BranchName: "master"
                      OutputArtifactFormat: "CODE_ZIP"
                      PollForSourceChanges: "false"
                      RepositoryName: !GetAtt CodeCommitRepository.Name
                  OutputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region
                  Namespace: "SourceVariables"
                  RunOrder: 1
            - 
              Name: "Build"
              Actions: 
                - 
                  Name: !Sub "Build${ProjectName}"
                  ActionTypeId: 
                      Category: "Build"
                      Owner: "AWS"
                      Provider: "CodeBuild"
                      Version: "1"
                  Configuration: 
                      ProjectName: !Ref CodeBuildProject
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  OutputArtifacts: 
                    - 
                      Name: "BuildArtifact"
                  Region: !Ref AWS::Region
                  Namespace: "BuildVariables"
                  RunOrder: 1
            - 
              Name: "Deploy"
              Actions: 
                - 
                  Name: "Deploy"
                  ActionTypeId: 
                      Category: "Deploy"
                      Owner: "AWS"
                      Provider: "S3"
                      Version: "1"
                  Configuration: 
                      BucketName: !Ref S3BucketHosting                      
                      Extract: "true"
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region
                  Namespace: "DeployVariables"
                  RunOrder: 1
            - 
              Name: "InvalidateCloudFrontByLambda"
              Actions: 
                - 
                  Name: "InvalidateCloudFrontByLambda"
                  ActionTypeId: 
                      Category: "Invoke"
                      Owner: "AWS"
                      Provider: "Lambda"
                      Version: "1"
                  Configuration: 
                      FunctionName: InvalidateCloudFrontDistribution
                      UserParameters: !Sub "{\"distributionId\": \"${CloudFrontDistribution.Id}\", \"objectPaths\": [\"/*\"]}"
                  InputArtifacts: 
                    - 
                      Name: "SourceArtifact"
                  Region: !Ref AWS::Region
                  RunOrder: 1

  EventsRule:
      Type: "AWS::Events::Rule"
      Properties:
          Name: !Sub "codepipeline-${ProjectName}-master-rule"
          Description: "Amazon CloudWatch Events rule to automatically start your pipeline when a change occurs in the AWS CodeCommit source repository and branch. Deleting this may prevent changes from being detected in that pipeline. Read more: http://docs.aws.amazon.com/codepipeline/latest/userguide/pipelines-about-starting.html"
          EventPattern: !Sub "{\"source\":[\"aws.codecommit\"],\"detail-type\":[\"CodeCommit Repository State Change\"],\"resources\":[\"arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}\"],\"detail\":{\"event\":[\"referenceCreated\",\"referenceUpdated\"],\"referenceType\":[\"branch\"],\"referenceName\":[\"master\"]}}"
          State: "ENABLED"
          Targets: 
            - 
              Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:Pipeline${ProjectName}"
              Id: !Sub "codepipeline-event-${ProjectName}"
              RoleArn: !GetAtt IAMRoleForBucketRepositoryToStartPipeline.Arn
          EventBusName: "default"

Outputs:
  WebPageURL:
    Description: "URL of the page"
    Value: !GetAtt CloudFrontDistribution.DomainName
  RepositoryCloneURL:
    Description: "URL for HTTP Clone"
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp

# TODO:
# Condition + If to create cloudfront with domain and certificate
# What was left outside?